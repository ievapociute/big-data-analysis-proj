from multiprocessing import Pool, cpu_count
import cv2
import numpy as np
import os
import time
from functools import wraps

def find_thresh(grayscale):
    """
    Calculate the optimal threshold to convert a grayscale image to black and white
    and the total number of black pixels below this threshold.
    """
    hist = cv2.calcHist([grayscale], [0], None, [256], [0, 256]).flatten() 
    cum_hist_norm = np.cumsum(hist) / hist.sum()
    threshold = np.searchsorted(cum_hist_norm, 0.5)
    black_pixels = hist[:threshold].sum()
    return threshold, black_pixels


def salt_pepp_noise(image, noisy_pixels):
    """
    Introduce salt-and-pepper noise to an image based on (0.1 * bw image) pixels.
    """
    noisy_image = image.copy()
    height, width, _ = noisy_image.shape
    
    row_indices = np.random.randint(0, height, noisy_pixels)
    col_indices = np.random.randint(0, width, noisy_pixels)
    
    noise_values = np.random.choice([0, 255], size=(noisy_pixels, 3))
    
    noisy_image[row_indices, col_indices] = noise_values
    
    return noisy_image


def transform_image(image):
    """
    Convert an image to black and white, apply Gaussian blur, and add salt-and-pepper noise,
    returning the transformed images and the time taken for each operation.
    """
    #start_time = time.time()
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    threshold, black_pixels = find_thresh(gray)
    bnw_image = cv2.threshold(gray, threshold, 255, cv2.THRESH_BINARY)[1]
    #bnw_time = time.time() - start_time

    #start_time = time.time()
    blurred = cv2.GaussianBlur(image, (5, 5), 0)
    #blur_time = time.time() - start_time

    #start_time = time.time()
    noisy_image = salt_pepp_noise(image, int(0.1 * black_pixels)) #0.1 as requested
    #noise_time = time.time() - start_time

    return bnw_image, blurred, noisy_image#, bnw_time, blur_time, noise_time


def transform_and_save_image(image_path, output_dir):
    """
    Read an image from a path, apply transformations (black and white, blur, noise),
    and save the transformed images to a specified directory, returning the time taken for each transformation.
    """
    image = cv2.imread(image_path)
    bnw_image, blurred, noisy_image, bnw_time, blur_time, noise_time = transform_image(image)
    
    base_name = os.path.splitext(os.path.basename(image_path))[0]
    cv2.imwrite(os.path.join(output_dir, f"{base_name}_bnw.jpg"), bnw_image)
    cv2.imwrite(os.path.join(output_dir, f"{base_name}_blurred.jpg"), blurred)
    cv2.imwrite(os.path.join(output_dir, f"{base_name}_noisy.jpg"), noisy_image)

    return bnw_time, blur_time, noise_time

def process_images_parallel(input_dir, output_dir):
    """
    Process images in a directory in parallel using multiple processes,
    applying transformations and saving them, and print the total time taken for each transformation step.
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    image_paths = [
        os.path.join(input_dir, f) for f in os.listdir(input_dir) 
        if f.endswith('.jpg')
        ]
    
    chunksize = 2
    with Pool(processes=cpu_count()) as pool:
        results = pool.starmap(
            transform_and_save_image, 
            [(path, output_dir) for path in image_paths],
            chunksize = chunksize
            )

    # Compute total time for each transformation
    #bnw_time = sum(result[0] for result in results)
    #blur_time = sum(result[1] for result in results)
    #noise_time = sum(result[2] for result in results)
    
    #print(f"BnW time: {bnw_time:.4f} seconds")
    #print(f"Blur time: {blur_time:.4f} seconds")
    #print(f"Noise time: {noise_time:.4f} seconds")


if __name__ == "__main__":
    input_dir = r"input"
    output_dir = r"ouput"
    
    start_time = time.time()
    process_images_parallel(input_dir, output_dir)
    
    print(f"Processing completed in {time.time() - start_time:.2f} seconds.")
